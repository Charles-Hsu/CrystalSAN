#  parse_engine_all.exp
#  
#
#  Created by Charles Hsu on 1/27/13.
#
#  usage:
#      expect parse_engine_all.exp <engine_last_part_of_ip> <database_filename>
#  for example:
#      $expect parse_engine_all.exp 227 server.db
#  will open the engine_227_all.xml file amd parse the information to database 'server.db'
#
#####################
#include public.exp
#####################
#source [file join [file dirname [info script]] xml.exp]

proc xml2list xml {
    regsub -all {>\s*<} [string trim $xml " \n\t<>"] "\} \{" xml
    set xml [string map {> "\} \{#text \{" < "\}\} \{"}  $xml]
    
    set res ""   ;# string to collect the result
    set stack {} ;# track open tags
    set rest {}
    foreach item "{$xml}" {
        switch -regexp -- $item {
            ^# {append res "{[lrange $item 0 end]} " ; #text item}
            ^/ {
                regexp {/(.+)} $item -> tagname ;# end tag
                set expected [lindex $stack end]
                if {$tagname!=$expected} {error "$item != $expected"}
                set stack [lrange $stack 0 end-1]
                append res "\}\} "
            }
            /$ { # singleton - start and end in one <> group
                regexp {([^ ]+)( (.+))?/$} $item -> tagname - rest
                set rest [lrange [string map {= " "} $rest] 0 end]
                append res "{$tagname [list $rest] {}} "
            }
            default {
                set tagname [lindex $item 0] ;# start tag
                set rest [lrange [string map {= " "} $item] 1 end]
                lappend stack $tagname
                append res "\{$tagname [list $rest] \{"
            }
        }
        if {[llength $rest]%2} {error "att's not paired: $rest"}
    }
    if [llength $stack] {error "unresolved: $stack"}
    string map {"\} \}" "\}\}"} [lindex $res 0]
}

proc list2xml list {
    switch -- [llength $list] {
        2 {lindex $list 1}
        3 {
            foreach {tag attributes children} $list break
            set res <$tag
            foreach {name value} $attributes {
                append res " $name=\"$value\""
            }
            if [llength $children] {
                append res >
                foreach child $children {
                    append res [list2xml $child]
                }
                append res </$tag>
            } else {append res />}
        }
        default {error "could not parse $list"}
    }
}
#-------------------------------------------- now testing:
set test {<foo a="b">bar and<grill x:c="d" e="f g"><baz x="y"/></grill><room/></foo>}

#set filename [lindex $argv 0]
#set fp [open $filename r]
#set file_data [read $fp]
#close $fp

proc tdomlist x {[[dom parse $x] documentElement root] asList} ;# reference
proc lequal {a b} {
    if {[llength $a] != [llength $b]} {return 0}
    if {[lindex $a 0] == $a} {return [string equal $a $b]}
    foreach i $a j $b {if {![lequal $i $j]} {return 0}}
    return 1
}
proc try x {
    puts [set a [tdomlist $x]]
    puts [set b [xml2list $x]]
    puts list:[lequal $a $b],string:[string equal $a $b]
}


proc compare_seconds {xml_seconds db_seconds} {
    puts "xml_seconds $xml_seconds"
    puts "db_seconds $db_seconds"
    if {[string length $db_seconds] == 0} {
        return "not_exists"
    }
    if {[expr $xml_seconds > $db_seconds]} {
        return "old_record"
    }
    return "the_same"
}


proc parse_xml_cli_conmgr_drive_status {args} {
    
    set cli_conmgr_drive_status     [lindex $args 0]
    set table_name                  [lindex $args 1]
    set site_name                   [lindex $args 2]
    set engine_name                 [lindex $args 3]
    set seconds                     [lindex $args 4]
    set serial                      [lindex $args 5]
    
    set drivesBlock     [lindex $cli_conmgr_drive_status 2]
    #puts $drivesBlock
    
    set list_length [llength [lindex $cli_conmgr_drive_status 2]]
    set driveNum [expr $list_length-2]
    set activeNum [lindex [lindex [lindex [lindex [lindex $cli_conmgr_drive_status 2] [expr $driveNum] ] 2] 0] 1]
    set inactiveNum [lindex [lindex [lindex [lindex [lindex $cli_conmgr_drive_status 2] [expr $driveNum+1] ] 2] 0] 1]
    
    set sql "INSERT INTO $table_name VALUES ('$serial','$seconds','$activeNum','$inactiveNum')"
    db eval $sql
    
    set table_name_detail   $table_name
    append table_name_detail "_detail"
    
    for {set i 0} {$i<$driveNum} {incr i 1} {
        
        set driveData [lindex [lindex $cli_conmgr_drive_status 2] $i]
        set drive_id                       [lindex [lindex $driveData 1] 1]
        set drive_status [lindex [lindex [lindex [lindex [lindex $driveData 2] 1] 2] 0] 1]
        set pathData                       [lindex [lindex $driveData 2] 2]
        set path_0_id      [lindex [lindex $pathData 1] 1]
        set path_0_port    [lindex [lindex [lindex [lindex [lindex $pathData 2] 0] 2] 0] 1]
        set path_0_wwpn    [lindex [lindex [lindex [lindex [lindex $pathData 2] 1] 2] 0] 1]
        set path_0_lun     [lindex [lindex [lindex [lindex [lindex $pathData 2] 2] 2] 0] 1]
        set path_0_pstatus [lindex [lindex [lindex [lindex [lindex $pathData 2] 3] 2] 0] 1]
        
        set sql "INSERT INTO $table_name_detail VALUES ('$serial','$seconds','$drive_id', '$drive_status', '$path_0_id', '$path_0_port', '$path_0_wwpn', '$path_0_lun', '$path_0_pstatus', '', '', '', '', '')"
        puts $sql
        db eval $sql
        
    }
}


proc parse_xml_cli_mirror {args} {
    
    #$cli_mirror_section $site_name $engine_name $seconds
    
    set cli_mirror_section [lindex $args 0]
    set site_name [lindex $args 1]
    set engine_name [lindex $args 2]
    set seconds [lindex $args 3]
    set serial [lindex $args 4]
    
    puts "[exec date]=== parse_cli_mirror start..."
    
    #puts $cli_mirror_section
    
    set mirror_count [expr [llength [lindex $cli_mirror_section 2]]-3]
    #puts "mirror_count=$mirror_count"

    set i 0
    set sql "insert into engine_cli_mirror values ('$serial',$seconds"
    for {} {$i < $mirror_count} {incr i 1} {
        append sql ","
        #puts [lindex [lindex $cli_mirror_section 2] $i]
        set mirror_data [lindex [lindex $cli_mirror_section 2] $i]
        set mirror_status [lindex [lindex $mirror_data 2] 1]
        set mirror_map [lindex [lindex $mirror_data 2] 2]
        set mirror_capacity [lindex [lindex $mirror_data 2] 3]
        #puts "mirror_$i"
        #puts "id_$i=[lindex [lindex $mirror_data 1] 1]"
        append sql "'[lindex [lindex $mirror_data 1] 1]'"
        #puts "[lindex $mirror_status 0]_$i=[lindex [lindex [lindex $mirror_status 2] 0] 1]"
        append sql ",'[lindex [lindex [lindex $mirror_status 2] 0] 1]'"
        #puts "[lindex $mirror_map 0]_$i=[lindex [lindex [lindex $mirror_map 2] 0] 1]"
        append sql ",'[lindex [lindex [lindex $mirror_map 2] 0] 1]'"
        #puts "[lindex $mirror_capacity 0]_$i=[lindex [lindex [lindex $mirror_capacity 2] 0] 1]"
        append sql ",'[lindex [lindex [lindex $mirror_capacity 2] 0] 1]'"
        #puts [lindex [lindex $mirror_data 2] 4]
        
        set j 0
        #puts "[lindex [lindex [lindex [lindex $mirror_data 2] 4] 1] 0]_$i-$j=[lindex [lindex [lindex [lindex $mirror_data 2] 4] 1] 1]"
        #puts "[lindex [lindex [lindex [lindex $mirror_data 2] 4] 1] 0]_$i-$j-status=[lindex [lindex [lindex [lindex [lindex [lindex [lindex $mirror_data 2] 4] 2] 1] 2] 0] 1]"
        #puts [lindex [lindex $mirror_data 2] 5]
        append sql ",'[lindex [lindex [lindex [lindex $mirror_data 2] 4] 1] 1]','[lindex [lindex [lindex [lindex [lindex [lindex [lindex $mirror_data 2] 4] 2] 1] 2] 0] 1]'"
        
        incr j 1
        #puts "[lindex [lindex [lindex [lindex $mirror_data 2] 5] 1] 0]_$i-$j=[lindex [lindex [lindex [lindex $mirror_data 2] 5] 1] 1]"
        #puts "[lindex [lindex [lindex [lindex $mirror_data 2] 5] 1] 0]_$i-$j-status=[lindex [lindex [lindex [lindex [lindex [lindex [lindex $mirror_data 2] 5] 2] 1] 2] 0] 1]"
        append sql ",'[lindex [lindex [lindex [lindex $mirror_data 2] 5] 1] 1]','[lindex [lindex [lindex [lindex [lindex [lindex [lindex $mirror_data 2] 5] 2] 1] 2] 0] 1]'"
    }
    for {} {$i < 6} {incr i 1} {
        append sql ",'','','','','','','',''"
    }
    
    set mirror_ok_data [lindex [lindex $cli_mirror_section 2] $mirror_count]
    set mirror_degraded_data [lindex [lindex $cli_mirror_section 2] [expr $mirror_count+1]]
    set mirror_failed_data [lindex [lindex $cli_mirror_section 2] [expr $mirror_count+2]]
    
    #puts "[lindex $mirror_ok_data 0]=[lindex [lindex [lindex $mirror_ok_data 2] 0] 1]"
    append sql ",'[lindex [lindex [lindex $mirror_ok_data 2] 0] 1]'"
    
    #puts "[lindex $mirror_degraded_data 0]=[lindex [lindex [lindex $mirror_degraded_data 2] 0] 1]"
    append sql ",'[lindex [lindex [lindex $mirror_degraded_data 2] 0] 1]'"
    
    #puts "[lindex $mirror_failed_data 0]=[lindex [lindex [lindex $mirror_failed_data 2] 0] 1]"
    append sql ",'[lindex [lindex [lindex $mirror_failed_data 2] 0] 1]'"
    
    append sql ")"
    
    puts $sql
    db eval $sql
    
    puts "[exec date]=== parse_cli_mirror completed!"

}

proc get_xml_cli_vpd_key_and_value_list {args} {
    #puts $args
    set items [lindex $args 0]
    
    set key [lindex $items 0]
    set subkey [lindex $items 1]
    
    if {[llength $subkey] == 2} {
        set key "[lindex $subkey 1]"
    }
    
    set value_list  [string trim [lindex [lindex [lindex $items 2] 0] 1]]
    
    
    set length [llength $value_list]
    
    set return_list "{{$key} {$value_list}}"
    
    if {$length == 0} {
        
        set return_list ""
        
        #puts [lindex [lindex $items 2] 0]
        
        set wwnn_data [lindex [lindex [lindex [lindex [lindex $items 2] 1] 2] 0] 1]
        
        set subkey [lindex [lindex [lindex $items 2] 1] 0]
        
        #puts "+++++++++++++++++ $key\_$subkey = $wwnn_data"
        
        #puts ">>>>>>>>>>return ====>  $return_list"
        lappend return_list "{$key\_$subkey} {$wwnn_data}"
        #puts ">>>>>>>>>>return ====>  $return_list"
        
        set wwpn_data [lindex [lindex [lindex [lindex [lindex $items 2] 2] 2] 0] 1]
        set subkey [lindex [lindex [lindex $items 2] 2] 0]
        
        #puts "+++++++++++++++++ $key\_$subkey = $wwpn_data"
        
        
        #puts [lindex [lindex [lindex $items 2] 1] 0]
        set subkey [lindex [lindex [lindex $items 2] 2] 0]
        #puts [lindex [lindex [lindex [lindex [lindex $items 2] 2] 2] 0] 1]
        set value [lindex [lindex [lindex [lindex [lindex $items 2] 2] 2] 0] 1]
        
        #puts ">>>>>>>>>>return ====>  $return_list"
        lappend return_list "{$key\_$subkey} {$wwpn_data}"
        #puts ">>>>>>>>>>return ====>  $return_list"
        
    }
    
    #puts "return ====>  $return_list"
    
    
    return $return_list
}


proc parse_xml_cli_vpd {args} {
        
    set cli_vpd_section [lindex [lindex $args 0] 2]
    set site_name [lindex $args 1]
    set table_name [lindex $args 2]
    set engine_name [lindex $args 3]
    set seconds [lindex $args 4]
    
    puts "[exec date]=== parse_cli_vpd start..."
    
    puts $cli_vpd_section
    
    set length [llength $cli_vpd_section]
    puts "length = $length"
    #set length [llength [lindex $cli_vpd_section 2]]
    
    set items ""
    set values ""
    
    foreach item $cli_vpd_section {
        set keyValueList [get_xml_cli_vpd_key_and_value_list $item]
        set length [llength $keyValueList]
        for {set i 0} {$i < $length} {incr i 1} {
            #puts "[lindex $keyValueList $i] = '[lindex $keyValueList $i+1]'"
            puts "[lindex [lindex $keyValueList $i] 0] = '[lindex [lindex $keyValueList $i] 1]'"
            set items "$items, [lindex [lindex $keyValueList $i] 0]"
            set values "$values, '[lindex [lindex $keyValueList $i] 1]'"
        }
    }
    puts "items ===> $items"
    puts "values ==> $values"
    set items [string trimleft $items ","]
    set values [string trimleft $values ","]
    puts "items ===> $items"
    puts "values ==> $values"
    
    set sql "INSERT INTO $table_name (seconds, $items) VALUES ($seconds, $values)"
    
    puts $sql
    db eval $sql
    
    puts "[exec date]=== parse_cli_vpd completed!"

    if {0} {
        set product_type_s [lindex $cli_vpd_section 0]
        set fw_version_s   [lindex $cli_vpd_section 1]
        set fw_date_s      [lindex $cli_vpd_section 2]
        set redboot_s      [lindex [lindex $cli_vpd_section 2] 3]
        set uid_s          [lindex [lindex $cli_vpd_section 2] 4]
        set serial_s       [lindex [lindex $cli_vpd_section 2] 5]
        set pcb_s          [lindex [lindex $cli_vpd_section 2] 6]
        set mac_s          [lindex [lindex $cli_vpd_section 2] 7]
        set ip_s           [lindex [lindex $cli_vpd_section 2] 8]
        set uptime_s       [lindex [lindex $cli_vpd_section 2] 9]
        set alert_s        [lindex [lindex $cli_vpd_section 2] 10]
        set time_s         [lindex [lindex $cli_vpd_section 2] 11]
        set port_A1        [lindex [lindex $cli_vpd_section 2] 12]
        set port_A2        [lindex [lindex $cli_vpd_section 2] 13]
        set port_B1        [lindex [lindex $cli_vpd_section 2] 14]
        set port_B2        [lindex [lindex $cli_vpd_section 2] 15]
        
        #puts "product_type"
        set product_type [string trim [lindex [lindex [lindex $product_type_s 2] 0] 1]]
        puts "[lindex $product_type_s 0]=$product_type"
        
        #puts $fw_version
        set fw_version [string trim [lindex [lindex [lindex $fw_version_s 2] 0] 1]]
        puts "[lindex $fw_version_s 0]=$fw_version"
        
        #puts $fw_date
        set fw_date [string trim [lindex [lindex [lindex $fw_date_s 2] 0] 1]]
        puts "[lindex $fw_date_s 0]=$fw_date"
        
        #puts $redboot
        set redboot [string trim [lindex [lindex [lindex $redboot_s 2] 0] 1]]
        puts "[lindex $redboot_s 0]=$redboot"
        
        #puts $uid
        set uid [string trim [lindex [lindex [lindex $uid_s 2] 0] 1]]
        puts "[lindex $uid_s 0]=$uid"
        
        #puts $serial
        set serial [string trim [lindex [lindex [lindex $serial_s 2] 0] 1]]
        puts "[lindex $serial_s 0]=$serial"
        
        #puts $pcb
        set pcb [string trim [lindex [lindex [lindex $pcb_s 2] 0] 1]]
        puts "[lindex $pcb_s 0]=$pcb"
        
        #puts $mac
        set mac [string trim [lindex [lindex [lindex $mac_s 2] 0] 1]]
        puts "[lindex $mac_s 0]=$mac"
        
        #puts $ip
        set ip [string trim [lindex [lindex [lindex $ip_s 2] 0] 1]]
        puts "[lindex $ip_s 0]=$ip"
        
        #puts $uptime
        set uptime [keyvalue $uptime_s]
        puts "[lindex $uptime_s 0]=$uptime"
        
        #puts $alert
        set alert [string trim [lindex [lindex [lindex $alert_s 2] 0] 1]]
        puts "alert=$alert"
        
        #puts $time
        set time [keyvalue $time_s]
        puts "[lindex $time_s 0]=$time"
        
        #puts $port_A1
        puts "[lindex [lindex $port_A1 1] 1]_[lindex [lindex [lindex $port_A1 2] 1] 0]=[lindex [lindex [lindex [lindex [lindex $port_A1 2] 1] 2] 0] 1]"
        puts "[lindex [lindex $port_A1 1] 1]_[lindex [lindex [lindex $port_A1 2] 2] 0]=[lindex [lindex [lindex [lindex [lindex $port_A1 2] 2] 2] 0] 1]"
        set a1_wwnn [lindex [lindex [lindex [lindex [lindex $port_A1 2] 1] 2] 0] 1]
        set a1_wwpn [lindex [lindex [lindex [lindex [lindex $port_A1 2] 2] 2] 0] 1]
        
        #puts $port_A2
        puts "[lindex [lindex $port_A2 1] 1]_[lindex [lindex [lindex $port_A2 2] 1] 0]=[lindex [lindex [lindex [lindex [lindex $port_A2 2] 1] 2] 0] 1]"
        puts "[lindex [lindex $port_A2 1] 1]_[lindex [lindex [lindex $port_A2 2] 2] 0]=[lindex [lindex [lindex [lindex [lindex $port_A2 2] 2] 2] 0] 1]"
        set a2_wwnn [lindex [lindex [lindex [lindex [lindex $port_A2 2] 1] 2] 0] 1]
        set a2_wwpn [lindex [lindex [lindex [lindex [lindex $port_A2 2] 2] 2] 0] 1]
        
        #puts $port_B1
        puts "[lindex [lindex $port_B1 1] 1]_[lindex [lindex [lindex $port_B1 2] 1] 0]=[lindex [lindex [lindex [lindex [lindex $port_B1 2] 1] 2] 0] 1]"
        puts "[lindex [lindex $port_B1 1] 1]_[lindex [lindex [lindex $port_B1 2] 2] 0]=[lindex [lindex [lindex [lindex [lindex $port_B1 2] 2] 2] 0] 1]"
        set b1_wwnn [lindex [lindex [lindex [lindex [lindex $port_B1 2] 1] 2] 0] 1]
        set b1_wwpn [lindex [lindex [lindex [lindex [lindex $port_B1 2] 2] 2] 0] 1]
        
        
        #puts $port_B2
        puts "[lindex [lindex $port_B2 1] 1]_[lindex [lindex [lindex $port_B2 2] 1] 0]=[lindex [lindex [lindex [lindex [lindex $port_B2 2] 1] 2] 0] 1]"
        puts "[lindex [lindex $port_B2 1] 1]_[lindex [lindex [lindex $port_B2 2] 2] 0]=[lindex [lindex [lindex [lindex [lindex $port_B2 2] 2] 2] 0] 1]"
        set b2_wwnn [lindex [lindex [lindex [lindex [lindex $port_B2 2] 1] 2] 0] 1]
        set b2_wwpn [lindex [lindex [lindex [lindex [lindex $port_B2 2] 2] 2] 0] 1]
        puts "-------------"
        
    }
    
    
    
}



#parse_xml_cli_conmgr_engine_status $cli_conmgr_engine_status_block $seconds $serial

proc parse_xml_cli_conmgr_engine_status {args} {
    
    set xml_block  [lindex $args 0]
    set seconds    [lindex $args 1]
    set serial     [lindex $args 2]

    set cluster_data [lindex [lindex [lindex $xml_block 2] 0] 2]
    #puts $cluster_data
    
    set cluster_id  [lindex [lindex [lindex [lindex $cluster_data 0] 2] 0] 1]
    puts "cluster_id=$cluster_id"
    
    set cluster_sts [lindex [lindex [lindex [lindex $cluster_data 1] 2] 0] 1]
    puts "cluster_sts=$cluster_sts"
    
    set path_0_data [lindex $cluster_data 2]
    # paths {id 1} {{port {} {{{#text} B1}}} {wwpn {} {{{#text} 2300-006022-09281e}}} {pstatus {} {{{#text} A}}}}
    
    set path_0_id   [lindex [lindex $path_0_data 1] 1]
    
    set path_0_port_data [lindex $path_0_data 2]
    # path_0_port_data => {port {} {{{#text} B1}}} {wwpn {} {{{#text} 2300-006022-09281e}}} {pstatus {} {{{#text} A}}}
    
    set path_0_port [lindex [lindex [lindex [lindex $path_0_port_data 0] 2] 0] 1]
    set path_0_port_wwpn [lindex [lindex [lindex [lindex $path_0_port_data 1] 2] 0] 1]
    set path_0_port_pstatus [lindex [lindex [lindex [lindex $path_0_port_data 2] 2] 0] 1]
    
    #puts $path_0_data
    #puts "path_0_id=$path_0_id"
    #puts "path_0_port=$path_0_port"
    #puts "path_0_port_wwpn=$path_0_port_wwpn"
    #puts "path_0_port_pstatus=$path_0_port_pstatus"
    
    set path_1_data [lindex $cluster_data 3]
    #puts $path_1_data
    #puts [lindex $cluster_data  2]
    # paths {id 1} {{port {} {{{#text} B1}}} {wwpn {} {{{#text} 2300-006022-09281e}}} {pstatus {} {{{#text} A}}}}
    
    set path_1_id   [lindex [lindex $path_1_data 1] 1]
    
    set path_1_port_data [lindex $path_1_data 2]
    # path_0_port_data => {port {} {{{#text} B1}}} {wwpn {} {{{#text} 2300-006022-09281e}}} {pstatus {} {{{#text} A}}}
    
    set path_1_port [lindex [lindex [lindex [lindex $path_1_port_data 0] 2] 0] 1]
    set path_1_port_wwpn [lindex [lindex [lindex [lindex $path_1_port_data 1] 2] 0] 1]
    set path_1_port_pstatus [lindex [lindex [lindex [lindex $path_1_port_data 2] 2] 0] 1]
    
    #puts $path_1_data
    #puts "path_1_id=$path_1_id"
    #puts "path_1_port=$path_1_port"
    #puts "path_1_port_wwpn=$path_1_port_wwpn"
    #puts "path_1_port_pstatus=$path_1_port_pstatus"
    
    set sql "INSERT INTO engine_cli_conmgr_engine_status VALUES ('$serial','$seconds','$cluster_id','$cluster_sts','$path_0_id','$path_0_port','$path_0_port_wwpn','$path_0_port_pstatus','$path_1_id','$path_1_port','$path_1_port_wwpn','$path_1_port_pstatus')"
    
    puts $sql
    db eval $sql

}




#
# http://www.tcl.tk/community/tcl2004/Papers/D.RichardHipp/drh.html
#
# It is common to want to extract a single value from a database.
# Because the eval method returns a list, you will need to use lindex on the result if you do this. For example:
#
# set value [lindex [db eval {SELECT b FROM t1 WHERE a='one'}] 0]
#

#proc seconds_in_table {name, serial} {
proc seconds_in_table {args} {
    set name [lindex $args 0]
    set serial [lindex $args 1]
    set sql "select seconds from $name where serial = '$serial'"
    #set seconds ""
    #puts $sql
    set seconds [lindex [db eval $sql] 0]
    #puts "seconds in proc seconds_in_table{} is ($seconds)"
    if {[string length $seconds] == 0} {
        return 0
    } else {
        return [expr $seconds]
    }
}

proc xml_is_older_than_database {args} {
    set seconds [lindex $args 0]
    set record_seconds [lindex $args 1] 
    puts "seconds $seconds, record_seconds $record_seconds"
    if {[string length $record_seconds] == 0} {
        puts "not exists"
        # not exists
        return "not_exists"
    }
    if {[expr $seconds > $record_seconds]} {
        puts "new record, update it"
        # new record
        return "new_record"
    }
    # older than current
    return "older"
}

proc keyvalue key {
    puts "key in keyvalue is $key"
    return [string trim [lindex [lindex [lindex $key 2] 0] 1]]
}

proc dress {seconds {size 1}} {
    upvar $text harry
    set harry "<h$size>$harry</h$size>"
    return [string length $harry]
}


proc printlist { inlist } {
        foreach item $inlist {
            # recurse - go into the sub list
            if { [llength $item] > 1 } {
                printlist $item 
            } else {
                puts $item
            }
        }
}

proc convert_to_int {string} {
    if {[llength $string] == 0} {
        return 0
    }
    return $string
}


proc parse_initiators {lists serial seconds} {

    puts $lists
    puts [llength $lists]
    
    puts [lindex $lists 0]
    puts [lindex $lists 1]
    puts [lindex $lists 2]
    
    set initiatorsBlock [lindex $lists 2]
    
    puts [llength [lindex $lists 2]]
    set initiatorsNum [expr [llength $initiatorsBlock] -2]
    set activeNum [lindex [lindex [lindex [lindex $initiatorsBlock $initiatorsNum] 2] 0] 1]
    set inactiveNum [lindex [lindex [lindex [lindex $initiatorsBlock [expr $initiatorsNum+1]] 2] 0] 1]
    
    puts $activeNum
    puts $inactiveNum
    puts "$activeNum + $inactiveNum = $initiatorsNum"
    
    set sql "INSERT INTO engine_cli_conmgr_initiator_status VALUES ('$serial', '$seconds', '$activeNum', '$inactiveNum')"
    puts $sql
    db eval $sql
    
    for {set i 0} {$i < $initiatorsNum} {incr i 1} {
        puts $i
        set idData [lindex [lindex [lindex $initiatorsBlock $i] 2] 0]
        set portData [lindex [lindex [lindex $initiatorsBlock $i] 2] 1]
        set wwpnData [lindex [lindex [lindex $initiatorsBlock $i] 2] 2]
        set statusData [lindex [lindex [lindex $initiatorsBlock $i] 2] 3]
        #set id [lindex [lindex $initiatorData 1] 1]
        set id [lindex [lindex [lindex $idData 2] 0] 1]
        set port [lindex [lindex [lindex $portData 2] 0] 1]
        set wwpn [lindex [lindex [lindex $wwpnData 2] 0] 1]
        set status [lindex [lindex [lindex $statusData 2] 0] 1]
        puts "serial=$serial"
        puts "seconds=$seconds"
        puts "id=$id"
        puts "port=$port"
        puts "wwpn=$wwpn"
        puts "status=$status"
        #puts $id
        #puts [lindex $initiatorData 2]
        set sql "INSERT INTO engine_cli_conmgr_initiator_status_detail VALUES ('$serial', '$seconds', '$id', '$port', '$wwpn', '$status')"
        puts $sql
        db eval $sql
    }

}




